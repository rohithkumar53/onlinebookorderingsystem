import axios from 'axios';
export const getAllBooksAction=()=> async (dispatch)=>{

    try {
        dispatch({type:'GET_BOOKS_REQUEST'});
        const response = await axios.get(`${process.env.REACT_APP_BACKEND}/api/books/getallbooks`);
        console.log(response.data);
        dispatch({type:'GET_BOOKS_SUCCESS', payload: response.data});
    } catch (error) {
        console.log(error);
        dispatch({type:'GET_BOOKS_FAILED', payload: error});
    }
}

export const getSpecificBookByIdAction=(id)=> async (dispatch)=>{

    try {
        dispatch({type:'GET_BOOKBYID_REQUEST'});
        const response = await axios.get(`${process.env.REACT_APP_BACKEND}/api/books/getbookbyid/${id}`);
        console.log(response.data);
        dispatch({type:'GET_BOOKBYID_SUCCESS', payload: response.data});
    } catch (error) {
        console.log(error);
        dispatch({type:'GET_BOOKBYID_FAILED', payload: error});
    }
}

export const booksfilter=(filterdetails)=> async (dispatch)=> {
    try {
        const {searchname, category, price}= filterdetails;
        dispatch({type:'GET_BOOKS_REQUEST'});
        const response = await axios.get(`${process.env.REACT_APP_BACKEND}/api/books/getallbooks`);
        let booksfiltered=response.data;
        if(searchname){
            booksfiltered=booksfiltered.filter(book => book.name.toLowerCase().includes(searchname.toLowerCase()));
        }
        if(category!=='category'){
            booksfiltered= booksfiltered.filter(book => book.category.toLowerCase().includes(category));
        }
        if(price!=='price'){
            if(price==='fromhigh'){
                booksfiltered=booksfiltered.sort((x,y) => (y.price-x.price));
            }
            else if(price==='fromlow'){
                booksfiltered=booksfiltered.sort((x,y) => (x.price-y.price));
            }
        }
        dispatch({type:'GET_BOOKS_SUCCESS', payload: booksfiltered});
    } catch (error) {
        console.log(error);
        dispatch({type:'GET_BOOKS_FAILED', payload: error});
    }
}